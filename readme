# Bundesliga RAG Chatbot

> **Note**: This is a markdown file ready for export. Save this content as `README.md` in your project directory.

A Retrieval-Augmented Generation (RAG) system that answers questions about German Bundesliga football coaches using Named Entity Recognition (NER), Wikidata integration, and structured prompt generation for LLM APIs.

## Table of Contents
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Configuration](#configuration)
- [Usage](#usage)
- [Project Structure](#project-structure)
- [Technical Architecture](#technical-architecture)
- [API Documentation](#api-documentation)
- [Testing](#testing)
- [Known Limitations](#known-limitations)
- [Future Improvements](#future-improvements)

## Features

- **Named Entity Recognition**: Hybrid approach using gazetteer-based matching and spaCy NLP
- **Real-time Data**: Fetches current Bundesliga club and manager information from Wikidata
- **Wikipedia Integration**: Enriches responses with biographical content from Wikipedia
- **Structured Prompts**: Generates properly formatted prompts for LLM APIs (OpenAI, Anthropic, etc.)
- **Fuzzy Matching**: Handles variations in club names and city references
- **Comprehensive Logging**: Detailed logging for debugging and monitoring

## Prerequisites

Before running this project, ensure you have the following installed:

- **Python 3.8+**
- **pip** (Python package installer)
- **Internet connection** (for Wikidata and Wikipedia API calls)

## Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd bundesliga-rag-chatbot
   ```

2. **Create virtual environment** (recommended)
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Download spaCy model**
(Optional if you want to use a out-of-shelf ner model)
   ```bash
   python -m spacy download en_core_web_sm
   ```

## Configuration


### Environment Setup

No additional configuration files are needed. The system uses:
- **Wikidata SPARQL endpoint**: `https://query.wikidata.org/sparql`
- **Wikipedia API**: `https://en.wikipedia.org/w/api.php`

## Usage

### DEMO with console interface

```bash
python console_interface.py
```

### Output responses for a list of queries

```python
from rag_chatbot import RAGChatbot

# Initialize the chatbot
chatbot = RAGChatbot()

# Process a query
result = chatbot.process_query("Who is coaching Köln?")
print(result)
```

### Command Line Demo

```bash
python rag_chatbot.py
```

This will run example queries and display the structured prompts.


### Output Format

The system returns structured prompts ready for LLM APIs:

```json
{
    "system": "You are a German Bundesliga football expert assistant...",
    "user": "1. FC Köln City: Köln Current Manager: Lukas Kwasniok Manager Background: Lukas Kwasniok (born 12 June 1981) is a Polish-German professional football manager and former player who is the head coach of Bundesliga club 1. FC Köln. USER QUESTION: Who is coaching Köln?",
    "context": {
        "club_name": "1. FC Köln",
        "manager_name": "Lukas Kwasniok",
        "manager_info": "Lukas Kwasniok (born 12 June 1981) is a Polish-German professional football manager and former player who is the head coach of Bundesliga club 1. FC Köln."
    }
}
```

## Project Structure

```
├── rag_chatbot.py          # Main RAG system orchestrating all components
├── ner_model.py            # NER implementation (gazetteer + fuzzy match)
├── wikidata_connector.py   # Wikidata and Wikipedia API integration
├── prompt_builder.py       # Structured prompt generation for LLMs
├── requirements.txt        # Python dependencies
└── README.md              # This file
```

## Technical Architecture

### Core Components

1. **RAGChatbot** (`rag_chatbot.py`)
   - Main orchestrator class
   - Coordinates entity extraction, data retrieval, and prompt generation
   - Handles confidence-based entity resolution

2. **NERManager** (`ner_model.py`)
   - **GazetteerNER**: Fuzzy matching against Bundesliga club/city names
   - **GazetteerData**: Preprocesses club names with variations and aliases

3. **WikidataConnector** (`wikidata_connector.py`)
   - SPARQL queries to Wikidata for current Bundesliga information
   - Wikipedia content retrieval for biographical information
   - Comprehensive error handling and fallback mechanisms

4. **PromptBuilder** (`prompt_builder.py`)
   - Generates system/user message pairs for LLM APIs
   - Handles both successful matches and error cases
   - Maintains context separation for optimal LLM performance




### Expected Outputs

The system should successfully resolve queries about current Bundesliga managers and return structured prompts with:
- Club name and location
- Current manager name
- Biographical information from Wikipedia
- Proper system/user message formatting



